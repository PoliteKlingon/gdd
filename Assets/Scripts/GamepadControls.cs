//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/GamepadControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamepadControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamepadControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamepadControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""d0d985f1-9195-46b1-8495-1f622e571cf7"",
            ""actions"": [
                {
                    ""name"": ""ShowEnergyMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c728e170-94df-4cf0-a6ce-c37dd1f3d126"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d642c8b4-c1e6-4088-8c34-5e7cb9304eb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a980ab3-62cd-4fea-a58b-c32008a21585"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a1930ceb-7533-49f2-af99-4e7ab9d162a0"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ConfirmEnergyTransfer"",
                    ""type"": ""Button"",
                    ""id"": ""636cd1e3-3509-4f87-b587-901a3417062e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""0932c00e-f088-4807-ae63-134a59dddc4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""732317f2-8a90-4203-9cb2-a504345ffec2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowEnergyMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9538a3c-3bb0-4dc4-a716-89e1f05bf09e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa9fbdca-a454-40a8-8f95-6682e0a3d5ae"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb66446a-4822-4584-8027-024b38a3dad6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f526f714-9280-4bd1-a905-8b95694281ee"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmEnergyTransfer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""033e921f-c6c0-4a0f-b45b-139285e84801"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_ShowEnergyMenu = m_Gameplay.FindAction("ShowEnergyMenu", throwIfNotFound: true);
        m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_Rotate = m_Gameplay.FindAction("Rotate", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_ConfirmEnergyTransfer = m_Gameplay.FindAction("ConfirmEnergyTransfer", throwIfNotFound: true);
        m_Gameplay_Handbrake = m_Gameplay.FindAction("Handbrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_ShowEnergyMenu;
    private readonly InputAction m_Gameplay_Shoot;
    private readonly InputAction m_Gameplay_Rotate;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_ConfirmEnergyTransfer;
    private readonly InputAction m_Gameplay_Handbrake;
    public struct GameplayActions
    {
        private @GamepadControls m_Wrapper;
        public GameplayActions(@GamepadControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowEnergyMenu => m_Wrapper.m_Gameplay_ShowEnergyMenu;
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
        public InputAction @Rotate => m_Wrapper.m_Gameplay_Rotate;
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @ConfirmEnergyTransfer => m_Wrapper.m_Gameplay_ConfirmEnergyTransfer;
        public InputAction @Handbrake => m_Wrapper.m_Gameplay_Handbrake;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @ShowEnergyMenu.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowEnergyMenu;
                @ShowEnergyMenu.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowEnergyMenu;
                @ShowEnergyMenu.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowEnergyMenu;
                @Shoot.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Rotate.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @ConfirmEnergyTransfer.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnConfirmEnergyTransfer;
                @ConfirmEnergyTransfer.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnConfirmEnergyTransfer;
                @ConfirmEnergyTransfer.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnConfirmEnergyTransfer;
                @Handbrake.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
                @Handbrake.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
                @Handbrake.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShowEnergyMenu.started += instance.OnShowEnergyMenu;
                @ShowEnergyMenu.performed += instance.OnShowEnergyMenu;
                @ShowEnergyMenu.canceled += instance.OnShowEnergyMenu;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @ConfirmEnergyTransfer.started += instance.OnConfirmEnergyTransfer;
                @ConfirmEnergyTransfer.performed += instance.OnConfirmEnergyTransfer;
                @ConfirmEnergyTransfer.canceled += instance.OnConfirmEnergyTransfer;
                @Handbrake.started += instance.OnHandbrake;
                @Handbrake.performed += instance.OnHandbrake;
                @Handbrake.canceled += instance.OnHandbrake;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnShowEnergyMenu(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnConfirmEnergyTransfer(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
    }
}
